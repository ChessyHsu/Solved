#include <cstdio>
#include <iostream>
#include <vector>
#include <queue>

#define MAX 10100
#define LARGE 100000000000

using namespace std;
typedef long long ll;

int N,M,K;
vector<int> child[MAX];
vector<int> par[MAX];
ll dp[MAX][110];
bool vis[MAX];
priority_queue<int,vector<int>,greater<int> > q;

int main(){
    ios::sync_with_stdio(0);
    freopen("cowsplay.in","r",stdin);
//    freopen("cowsplay.out","w",stdout);
    int a,b;
    cin >> N >> M >> K;
    for(int x = 0;x<M;x++){
        cin >> a >> b;
        a--;
        b--;
        child[a].push_back(b);
        par[b].push_back(a);
    }
    for(int x = 0;x<N;x++) dp[x][0] = LARGE; 
    dp[N-1][0] = 0;
    q.push(N-1);
    while(!q.empty()){
        int cur = q.top();
        q.pop();
        if(vis[cur]) continue;
        vis[cur] = true;
        for(int x = 0;x<par[cur].size();x++){
            if(dp[par[cur][x]][0]>dp[cur][0]+1){
                dp[par[cur][x]][0] = dp[cur][0]+1;
                q.push(par[cur][x]);
            }
        }
    }


    for(int k = 0;k<=K;k++){
         for(int x = 0;x<N;x++){
            for(int y = 0;y<child[x].size();y++){
                if(dp[child[x][y]][k-1]+1<bot) dp[x][k] = dp[child[x][y]][k]+1;
            }
            dp[x][k] = max(dp[x][k],bot);
        }
        while(!q.empty()) q.pop();
        for(int x = 0;x<N;x++) vis[x] = false;
        dp[N-1][k] = 0;
        q.push(N-1);
        while(!q.empty()){
            int cur = q.top();
            q.pop();
            if(vis[cur]) continue;
            vis[cur] = true;
            for(int x = 0;x<par[cur].size();x++){
                ll old = dp[par[cur][x]][k+1];
                ll &now = dp[par[cur][x]][k+1];
                if(dp[cur][k]+1>now) now = dp[cur][k]+1;
                if(old<now) q.push(par[cur][x]);
            }
        }
        for(int x = 0;x<N;x++){
            ll bot = LARGE;
            for(int y = 0;y<child[x].size();y++){
                if(dp[child[x][y]][k]+1<bot) bot = dp[child[x][y]][k]+1;
            }
            dp[x][k] = max(dp[x][k],bot);
        }
    }
    cout << dp[0][K] << endl;




}
